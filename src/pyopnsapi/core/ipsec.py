# Auto-generated by extract.rb
# API Documentation: https://docs.opnsense.org/development/api/core/ipsec.html

from pyopnsapi import client


class ConnectionsClient(client.OPNClient):
    """A client for interacting with the Ipsec/Connections endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_child(self):
      return self._post("ipsec/connections/add_child")

    def add_connection(self):
      return self._post("ipsec/connections/add_connection")

    def add_local(self):
      return self._post("ipsec/connections/add_local")

    def add_remote(self):
      return self._post("ipsec/connections/add_remote")

    def get(self):
      return self._get("ipsec/connections/get")

    def is_enabled(self):
      return self._get("ipsec/connections/is_enabled")

    def get_search_child(self):
      return self._get("ipsec/connections/search_child")

    def post_search_child(self):
      return self._post("ipsec/connections/search_child")

    def get_search_connection(self):
      return self._get("ipsec/connections/search_connection")

    def post_search_connection(self):
      return self._post("ipsec/connections/search_connection")

    def get_search_local(self):
      return self._get("ipsec/connections/search_local")

    def post_search_local(self):
      return self._post("ipsec/connections/search_local")

    def get_search_remote(self):
      return self._get("ipsec/connections/search_remote")

    def post_search_remote(self):
      return self._post("ipsec/connections/search_remote")

    def set(self):
      return self._post("ipsec/connections/set")

    def swanctl(self):
      return self._get("ipsec/connections/swanctl")


class KeyPairsClient(client.OPNClient):
    """A client for interacting with the Ipsec/KeyPairs endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_item(self):
      return self._post("ipsec/key_pairs/add_item")

    def get(self):
      return self._get("ipsec/key_pairs/get")

    def get_search_item(self):
      return self._get("ipsec/key_pairs/search_item")

    def post_search_item(self):
      return self._post("ipsec/key_pairs/search_item")

    def set(self):
      return self._post("ipsec/key_pairs/set")


class LeasesClient(client.OPNClient):
    """A client for interacting with the Ipsec/Leases endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def pools(self):
      return self._get("ipsec/leases/pools")

    def search(self):
      return self._get("ipsec/leases/search")


class LegacySubsystemClient(client.OPNClient):
    """A client for interacting with the Ipsec/LegacySubsystem endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def apply_config(self):
      return self._post("ipsec/legacy_subsystem/apply_config")

    def status(self):
      return self._get("ipsec/legacy_subsystem/status")


class ManualSpdClient(client.OPNClient):
    """A client for interacting with the Ipsec/ManualSpd endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add(self):
      return self._post("ipsec/manual_spd/add")

    def get_search(self):
      return self._get("ipsec/manual_spd/search")

    def post_search(self):
      return self._post("ipsec/manual_spd/search")


class PoolsClient(client.OPNClient):
    """A client for interacting with the Ipsec/Pools endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add(self):
      return self._post("ipsec/pools/add")

    def get_search(self):
      return self._get("ipsec/pools/search")

    def post_search(self):
      return self._post("ipsec/pools/search")


class PreSharedKeysClient(client.OPNClient):
    """A client for interacting with the Ipsec/PreSharedKeys endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_item(self):
      return self._post("ipsec/pre_shared_keys/add_item")

    def get(self):
      return self._get("ipsec/pre_shared_keys/get")

    def get_search_item(self):
      return self._get("ipsec/pre_shared_keys/search_item")

    def post_search_item(self):
      return self._post("ipsec/pre_shared_keys/search_item")

    def set(self):
      return self._post("ipsec/pre_shared_keys/set")


class SadClient(client.OPNClient):
    """A client for interacting with the Ipsec/Sad endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def search(self):
      return self._get("ipsec/sad/search")


class ServiceClient(client.OPNClient):
    """A client for interacting with the Ipsec/Service endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def reconfigure(self):
      return self._post("ipsec/service/reconfigure")

    def restart(self):
      return self._post("ipsec/service/restart")

    def start(self):
      return self._post("ipsec/service/start")

    def status(self):
      return self._get("ipsec/service/status")

    def stop(self):
      return self._post("ipsec/service/stop")


class SessionsClient(client.OPNClient):
    """A client for interacting with the Ipsec/Sessions endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def search_phase1(self):
      return self._get("ipsec/sessions/search_phase1")

    def search_phase2(self):
      return self._get("ipsec/sessions/search_phase2")


class SettingsClient(client.OPNClient):
    """A client for interacting with the Ipsec/Settings endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def get(self):
      return self._get("ipsec/settings/get")

    def set(self):
      return self._post("ipsec/settings/set")


class SpdClient(client.OPNClient):
    """A client for interacting with the Ipsec/Spd endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def search(self):
      return self._get("ipsec/spd/search")


class TunnelClient(client.OPNClient):
    """A client for interacting with the Ipsec/Tunnel endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def search_phase1(self):
      return self._get("ipsec/tunnel/search_phase1")

    def search_phase2(self):
      return self._get("ipsec/tunnel/search_phase2")


class VtiClient(client.OPNClient):
    """A client for interacting with the Ipsec/Vti endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add(self):
      return self._post("ipsec/vti/add")

    def get_search(self):
      return self._get("ipsec/vti/search")

    def post_search(self):
      return self._post("ipsec/vti/search")

