# Auto-generated by extract.rb
# API Documentation: https://docs.opnsense.org/development/api/core/firewall.html

from pyopnsapi import client


class AliasClient(client.OPNClient):
    """A client for interacting with the Firewall/Alias endpoint.

    Model Schema: https://github.com/opnsense/core/blob/master/src/opnsense/mvc/app/models/OPNsense/Firewall/Alias.xml

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_item(self):
      return self._post("firewall/alias/add_item")

    def get_export(self):
      return self._get("firewall/alias/export")

    def post_export(self):
      return self._post("firewall/alias/export")

    def get(self):
      return self._get("firewall/alias/get")

    def get_geo_i_p(self):
      return self._get("firewall/alias/get_geo_i_p")

    def get_table_size(self):
      return self._get("firewall/alias/get_table_size")

    def import(self):
      return self._post("firewall/alias/import")

    def list_categories(self):
      return self._get("firewall/alias/list_categories")

    def list_countries(self):
      return self._get("firewall/alias/list_countries")

    def list_network_aliases(self):
      return self._get("firewall/alias/list_network_aliases")

    def list_user_groups(self):
      return self._get("firewall/alias/list_user_groups")

    def reconfigure(self):
      return self._post("firewall/alias/reconfigure")

    def get_search_item(self):
      return self._get("firewall/alias/search_item")

    def post_search_item(self):
      return self._post("firewall/alias/search_item")

    def set(self):
      return self._post("firewall/alias/set")


class AliasUtilClient(client.OPNClient):
    """A client for interacting with the Firewall/AliasUtil endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def aliases(self):
      return self._get("firewall/alias_util/aliases")

    def find_references(self):
      return self._post("firewall/alias_util/find_references")

    def update_bogons(self):
      return self._get("firewall/alias_util/update_bogons")


class CategoryClient(client.OPNClient):
    """A client for interacting with the Firewall/Category endpoint.

    Model Schema: https://github.com/opnsense/core/blob/master/src/opnsense/mvc/app/models/OPNsense/Firewall/Category.xml

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_item(self):
      return self._post("firewall/category/add_item")

    def get(self):
      return self._get("firewall/category/get")

    def set(self):
      return self._post("firewall/category/set")


class FilterBaseClient(client.OPNClient):
    """A client for interacting with the Firewall/FilterBase endpoint.

    Model Schema: https://github.com/opnsense/core/blob/master/src/opnsense/mvc/app/models/OPNsense/Firewall/Filter.xml

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def get(self):
      return self._get("firewall/filter_base/get")

    def list_categories(self):
      return self._get("firewall/filter_base/list_categories")

    def list_network_select_options(self):
      return self._get("firewall/filter_base/list_network_select_options")

    def savepoint(self):
      return self._post("firewall/filter_base/savepoint")

    def set(self):
      return self._post("firewall/filter_base/set")


class FilterClient(client.OPNClient):
    """A client for interacting with the Firewall/Filter endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_rule(self):
      return self._post("firewall/filter/add_rule")

    def get_interface_list(self):
      return self._get("firewall/filter/get_interface_list")

    def get_search_rule(self):
      return self._get("firewall/filter/search_rule")

    def post_search_rule(self):
      return self._post("firewall/filter/search_rule")


class FilterUtilClient(client.OPNClient):
    """A client for interacting with the Firewall/FilterUtil endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def rule_stats(self):
      return self._get("firewall/filter_util/rule_stats")


class GroupClient(client.OPNClient):
    """A client for interacting with the Firewall/Group endpoint.

    Model Schema: https://github.com/opnsense/core/blob/master/src/opnsense/mvc/app/models/OPNsense/Firewall/Group.xml

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_item(self):
      return self._post("firewall/group/add_item")

    def get(self):
      return self._get("firewall/group/get")

    def reconfigure(self):
      return self._post("firewall/group/reconfigure")

    def get_search_item(self):
      return self._get("firewall/group/search_item")

    def post_search_item(self):
      return self._post("firewall/group/search_item")

    def set(self):
      return self._post("firewall/group/set")


class NptClient(client.OPNClient):
    """A client for interacting with the Firewall/Npt endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_rule(self):
      return self._post("firewall/npt/add_rule")

    def get_search_rule(self):
      return self._get("firewall/npt/search_rule")

    def post_search_rule(self):
      return self._post("firewall/npt/search_rule")


class OneToOneClient(client.OPNClient):
    """A client for interacting with the Firewall/OneToOne endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_rule(self):
      return self._post("firewall/one_to_one/add_rule")

    def get_search_rule(self):
      return self._get("firewall/one_to_one/search_rule")

    def post_search_rule(self):
      return self._post("firewall/one_to_one/search_rule")


class SourceNatClient(client.OPNClient):
    """A client for interacting with the Firewall/SourceNat endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_rule(self):
      return self._post("firewall/source_nat/add_rule")

    def get_search_rule(self):
      return self._get("firewall/source_nat/search_rule")

    def post_search_rule(self):
      return self._post("firewall/source_nat/search_rule")

