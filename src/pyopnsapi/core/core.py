# Auto-generated by extract.rb
# API Documentation: https://docs.opnsense.org/development/api/core/core.html

from pyopnsapi import client


class BackupClient(client.OPNClient):
    """A client for interacting with the Core/Backup endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def providers(self):
      return self._get("core/backup/providers")


class DashboardClient(client.OPNClient):
    """A client for interacting with the Core/Dashboard endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def get_dashboard(self):
      return self._get("core/dashboard/get_dashboard")

    def picture(self):
      return self._get("core/dashboard/picture")

    def product_info_feed(self):
      return self._get("core/dashboard/product_info_feed")

    def restore_defaults(self):
      return self._post("core/dashboard/restore_defaults")

    def save_widgets(self):
      return self._post("core/dashboard/save_widgets")


class HasyncClient(client.OPNClient):
    """A client for interacting with the Core/Hasync endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def get(self):
      return self._get("core/hasync/get")

    def reconfigure(self):
      return self._post("core/hasync/reconfigure")

    def set(self):
      return self._post("core/hasync/set")


class HasyncStatusClient(client.OPNClient):
    """A client for interacting with the Core/HasyncStatus endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def services(self):
      return self._get("core/hasync_status/services")

    def version(self):
      return self._get("core/hasync_status/version")


class InitialSetupClient(client.OPNClient):
    """A client for interacting with the Core/InitialSetup endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def configure(self):
      return self._get("core/initial_setup/configure")

    def get(self):
      return self._get("core/initial_setup/get")

    def set(self):
      return self._post("core/initial_setup/set")


class MenuClient(client.OPNClient):
    """A client for interacting with the Core/Menu endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def search(self):
      return self._get("core/menu/search")

    def tree(self):
      return self._get("core/menu/tree")


class ServiceClient(client.OPNClient):
    """A client for interacting with the Core/Service endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def search(self):
      return self._get("core/service/search")


class SnapshotsClient(client.OPNClient):
    """A client for interacting with the Core/Snapshots endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add(self):
      return self._post("core/snapshots/add")

    def is_supported(self):
      return self._get("core/snapshots/is_supported")

    def search(self):
      return self._get("core/snapshots/search")


class SystemClient(client.OPNClient):
    """A client for interacting with the Core/System endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def dismiss_status(self):
      return self._post("core/system/dismiss_status")

    def halt(self):
      return self._post("core/system/halt")

    def reboot(self):
      return self._post("core/system/reboot")

    def status(self):
      return self._get("core/system/status")


class TunablesClient(client.OPNClient):
    """A client for interacting with the Core/Tunables endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_item(self):
      return self._post("core/tunables/add_item")

    def get(self):
      return self._get("core/tunables/get")

    def reconfigure(self):
      return self._post("core/tunables/reconfigure")

    def reset(self):
      return self._post("core/tunables/reset")

    def get_search_item(self):
      return self._get("core/tunables/search_item")

    def post_search_item(self):
      return self._post("core/tunables/search_item")

    def set(self):
      return self._post("core/tunables/set")

