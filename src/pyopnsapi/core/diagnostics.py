# Auto-generated by extract.rb
# API Documentation: https://docs.opnsense.org/development/api/core/diagnostics.html

from pyopnsapi import client


class ActivityClient(client.OPNClient):
    """A client for interacting with the Diagnostics/Activity endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def get_activity(self):
      return self._get("diagnostics/activity/get_activity")


class CpuUsageClient(client.OPNClient):
    """A client for interacting with the Diagnostics/CpuUsage endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def get_c_p_u_type(self):
      return self._get("diagnostics/cpu_usage/get_c_p_u_type")

    def stream(self):
      return self._get("diagnostics/cpu_usage/stream")


class DnsClient(client.OPNClient):
    """A client for interacting with the Diagnostics/Dns endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def reverse_lookup(self):
      return self._get("diagnostics/dns/reverse_lookup")


class DnsDiagnosticsClient(client.OPNClient):
    """A client for interacting with the Diagnostics/DnsDiagnostics endpoint.

    Model Schema: https://github.com/opnsense/core/blob/master/src/opnsense/mvc/app/models/OPNsense/Diagnostics/DnsDiagnostics.xml

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def get(self):
      return self._get("diagnostics/dns_diagnostics/get")

    def set(self):
      return self._post("diagnostics/dns_diagnostics/set")


class FirewallClient(client.OPNClient):
    """A client for interacting with the Diagnostics/Firewall endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def flush_sources(self):
      return self._post("diagnostics/firewall/flush_sources")

    def flush_states(self):
      return self._post("diagnostics/firewall/flush_states")

    def kill_states(self):
      return self._post("diagnostics/firewall/kill_states")

    def list_rule_ids(self):
      return self._get("diagnostics/firewall/list_rule_ids")

    def log(self):
      return self._get("diagnostics/firewall/log")

    def log_filters(self):
      return self._get("diagnostics/firewall/log_filters")

    def pf_states(self):
      return self._get("diagnostics/firewall/pf_states")

    def query_pf_top(self):
      return self._post("diagnostics/firewall/query_pf_top")

    def query_states(self):
      return self._post("diagnostics/firewall/query_states")

    def stats(self):
      return self._get("diagnostics/firewall/stats")

    def stream_log(self):
      return self._get("diagnostics/firewall/stream_log")


class InterfaceClient(client.OPNClient):
    """A client for interacting with the Diagnostics/Interface endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def del_route(self):
      return self._post("diagnostics/interface/del_route")

    def flush_arp(self):
      return self._post("diagnostics/interface/flush_arp")

    def get_arp(self):
      return self._get("diagnostics/interface/get_arp")

    def get_bpf_statistics(self):
      return self._get("diagnostics/interface/get_bpf_statistics")

    def get_interface_config(self):
      return self._get("diagnostics/interface/get_interface_config")

    def get_interface_names(self):
      return self._get("diagnostics/interface/get_interface_names")

    def get_interface_statistics(self):
      return self._get("diagnostics/interface/get_interface_statistics")

    def get_memory_statistics(self):
      return self._get("diagnostics/interface/get_memory_statistics")

    def get_ndp(self):
      return self._get("diagnostics/interface/get_ndp")

    def get_netisr_statistics(self):
      return self._get("diagnostics/interface/get_netisr_statistics")

    def get_pfsync_nodes(self):
      return self._get("diagnostics/interface/get_pfsync_nodes")

    def get_protocol_statistics(self):
      return self._get("diagnostics/interface/get_protocol_statistics")

    def get_routes(self):
      return self._get("diagnostics/interface/get_routes")

    def get_socket_statistics(self):
      return self._get("diagnostics/interface/get_socket_statistics")

    def get_vip_status(self):
      return self._get("diagnostics/interface/get_vip_status")

    def search_arp(self):
      return self._get("diagnostics/interface/search_arp")

    def search_ndp(self):
      return self._get("diagnostics/interface/search_ndp")


class LvtemplateClient(client.OPNClient):
    """A client for interacting with the Diagnostics/Lvtemplate endpoint.

    Model Schema: https://github.com/opnsense/core/blob/master/src/opnsense/mvc/app/models/OPNsense/Diagnostics/Lvtemplate.xml

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_item(self):
      return self._post("diagnostics/lvtemplate/add_item")

    def get(self):
      return self._get("diagnostics/lvtemplate/get")

    def get_search_item(self):
      return self._get("diagnostics/lvtemplate/search_item")

    def post_search_item(self):
      return self._post("diagnostics/lvtemplate/search_item")

    def set(self):
      return self._post("diagnostics/lvtemplate/set")


class NetflowClient(client.OPNClient):
    """A client for interacting with the Diagnostics/Netflow endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def cache_stats(self):
      return self._get("diagnostics/netflow/cache_stats")

    def getconfig(self):
      return self._get("diagnostics/netflow/getconfig")

    def is_enabled(self):
      return self._get("diagnostics/netflow/is_enabled")

    def reconfigure(self):
      return self._post("diagnostics/netflow/reconfigure")

    def setconfig(self):
      return self._get("diagnostics/netflow/setconfig")

    def status(self):
      return self._get("diagnostics/netflow/status")


class NetworkinsightClient(client.OPNClient):
    """A client for interacting with the Diagnostics/Networkinsight endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def get_interfaces(self):
      return self._get("diagnostics/networkinsight/get_interfaces")

    def get_metadata(self):
      return self._get("diagnostics/networkinsight/get_metadata")

    def get_protocols(self):
      return self._get("diagnostics/networkinsight/get_protocols")

    def get_services(self):
      return self._get("diagnostics/networkinsight/get_services")


class PacketCaptureClient(client.OPNClient):
    """A client for interacting with the Diagnostics/PacketCapture endpoint.

    Model Schema: https://github.com/opnsense/core/blob/master/src/opnsense/mvc/app/models/OPNsense/Diagnostics/PacketCapture.xml

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def get(self):
      return self._get("diagnostics/packet_capture/get")

    def search_jobs(self):
      return self._get("diagnostics/packet_capture/search_jobs")

    def set(self):
      return self._post("diagnostics/packet_capture/set")


class PingClient(client.OPNClient):
    """A client for interacting with the Diagnostics/Ping endpoint.

    Model Schema: https://github.com/opnsense/core/blob/master/src/opnsense/mvc/app/models/OPNsense/Diagnostics/Ping.xml

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def get(self):
      return self._get("diagnostics/ping/get")

    def search_jobs(self):
      return self._get("diagnostics/ping/search_jobs")

    def set(self):
      return self._post("diagnostics/ping/set")


class PortprobeClient(client.OPNClient):
    """A client for interacting with the Diagnostics/Portprobe endpoint.

    Model Schema: https://github.com/opnsense/core/blob/master/src/opnsense/mvc/app/models/OPNsense/Diagnostics/Portprobe.xml

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def get(self):
      return self._get("diagnostics/portprobe/get")

    def set(self):
      return self._post("diagnostics/portprobe/set")


class SystemClient(client.OPNClient):
    """A client for interacting with the Diagnostics/System endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def memory(self):
      return self._get("diagnostics/system/memory")

    def system_disk(self):
      return self._get("diagnostics/system/system_disk")

    def system_information(self):
      return self._get("diagnostics/system/system_information")

    def system_mbuf(self):
      return self._get("diagnostics/system/system_mbuf")

    def system_resources(self):
      return self._get("diagnostics/system/system_resources")

    def system_swap(self):
      return self._get("diagnostics/system/system_swap")

    def system_temperature(self):
      return self._get("diagnostics/system/system_temperature")

    def system_time(self):
      return self._get("diagnostics/system/system_time")


class SystemhealthClient(client.OPNClient):
    """A client for interacting with the Diagnostics/Systemhealth endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def get_interfaces(self):
      return self._get("diagnostics/systemhealth/get_interfaces")

    def get_rrd_list(self):
      return self._get("diagnostics/systemhealth/get_rrd_list")


class TracerouteClient(client.OPNClient):
    """A client for interacting with the Diagnostics/Traceroute endpoint.

    Model Schema: https://github.com/opnsense/core/blob/master/src/opnsense/mvc/app/models/OPNsense/Diagnostics/Traceroute.xml

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def get(self):
      return self._get("diagnostics/traceroute/get")

    def set(self):
      return self._post("diagnostics/traceroute/set")


class TrafficClient(client.OPNClient):
    """A client for interacting with the Diagnostics/Traffic endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def _interface(self):
      return self._get("diagnostics/traffic/_interface")

