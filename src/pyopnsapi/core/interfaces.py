# Auto-generated by extract.rb
# API Documentation: https://docs.opnsense.org/development/api/core/interfaces.html

from pyopnsapi import client


class BridgeSettingsClient(client.OPNClient):
    """A client for interacting with the Interfaces/BridgeSettings endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_item(self):
      return self._post("interfaces/bridge_settings/add_item")

    def get(self):
      return self._get("interfaces/bridge_settings/get")

    def reconfigure(self):
      return self._post("interfaces/bridge_settings/reconfigure")

    def get_search_item(self):
      return self._get("interfaces/bridge_settings/search_item")

    def post_search_item(self):
      return self._post("interfaces/bridge_settings/search_item")

    def set(self):
      return self._post("interfaces/bridge_settings/set")


class GifSettingsClient(client.OPNClient):
    """A client for interacting with the Interfaces/GifSettings endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_item(self):
      return self._post("interfaces/gif_settings/add_item")

    def get(self):
      return self._get("interfaces/gif_settings/get")

    def get_if_options(self):
      return self._get("interfaces/gif_settings/get_if_options")

    def reconfigure(self):
      return self._post("interfaces/gif_settings/reconfigure")

    def get_search_item(self):
      return self._get("interfaces/gif_settings/search_item")

    def post_search_item(self):
      return self._post("interfaces/gif_settings/search_item")

    def set(self):
      return self._post("interfaces/gif_settings/set")


class GreSettingsClient(client.OPNClient):
    """A client for interacting with the Interfaces/GreSettings endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_item(self):
      return self._post("interfaces/gre_settings/add_item")

    def get(self):
      return self._get("interfaces/gre_settings/get")

    def get_if_options(self):
      return self._get("interfaces/gre_settings/get_if_options")

    def reconfigure(self):
      return self._post("interfaces/gre_settings/reconfigure")

    def get_search_item(self):
      return self._get("interfaces/gre_settings/search_item")

    def post_search_item(self):
      return self._post("interfaces/gre_settings/search_item")

    def set(self):
      return self._post("interfaces/gre_settings/set")


class LaggSettingsClient(client.OPNClient):
    """A client for interacting with the Interfaces/LaggSettings endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_item(self):
      return self._post("interfaces/lagg_settings/add_item")

    def get(self):
      return self._get("interfaces/lagg_settings/get")

    def reconfigure(self):
      return self._post("interfaces/lagg_settings/reconfigure")

    def get_search_item(self):
      return self._get("interfaces/lagg_settings/search_item")

    def post_search_item(self):
      return self._post("interfaces/lagg_settings/search_item")

    def set(self):
      return self._post("interfaces/lagg_settings/set")


class LoopbackSettingsClient(client.OPNClient):
    """A client for interacting with the Interfaces/LoopbackSettings endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_item(self):
      return self._post("interfaces/loopback_settings/add_item")

    def get(self):
      return self._get("interfaces/loopback_settings/get")

    def reconfigure(self):
      return self._post("interfaces/loopback_settings/reconfigure")

    def get_search_item(self):
      return self._get("interfaces/loopback_settings/search_item")

    def post_search_item(self):
      return self._post("interfaces/loopback_settings/search_item")

    def set(self):
      return self._post("interfaces/loopback_settings/set")


class NeighborSettingsClient(client.OPNClient):
    """A client for interacting with the Interfaces/NeighborSettings endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_item(self):
      return self._post("interfaces/neighbor_settings/add_item")

    def get(self):
      return self._get("interfaces/neighbor_settings/get")

    def reconfigure(self):
      return self._post("interfaces/neighbor_settings/reconfigure")

    def get_search_item(self):
      return self._get("interfaces/neighbor_settings/search_item")

    def post_search_item(self):
      return self._post("interfaces/neighbor_settings/search_item")

    def set(self):
      return self._post("interfaces/neighbor_settings/set")


class OverviewClient(client.OPNClient):
    """A client for interacting with the Interfaces/Overview endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def export(self):
      return self._get("interfaces/overview/export")


class VipSettingsClient(client.OPNClient):
    """A client for interacting with the Interfaces/VipSettings endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_item(self):
      return self._post("interfaces/vip_settings/add_item")

    def get(self):
      return self._get("interfaces/vip_settings/get")

    def get_unused_vhid(self):
      return self._get("interfaces/vip_settings/get_unused_vhid")

    def reconfigure(self):
      return self._post("interfaces/vip_settings/reconfigure")

    def get_search_item(self):
      return self._get("interfaces/vip_settings/search_item")

    def post_search_item(self):
      return self._post("interfaces/vip_settings/search_item")

    def set(self):
      return self._post("interfaces/vip_settings/set")


class VlanSettingsClient(client.OPNClient):
    """A client for interacting with the Interfaces/VlanSettings endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_item(self):
      return self._post("interfaces/vlan_settings/add_item")

    def get(self):
      return self._get("interfaces/vlan_settings/get")

    def reconfigure(self):
      return self._post("interfaces/vlan_settings/reconfigure")

    def get_search_item(self):
      return self._get("interfaces/vlan_settings/search_item")

    def post_search_item(self):
      return self._post("interfaces/vlan_settings/search_item")

    def set(self):
      return self._post("interfaces/vlan_settings/set")


class VxlanSettingsClient(client.OPNClient):
    """A client for interacting with the Interfaces/VxlanSettings endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

    def add_item(self):
      return self._post("interfaces/vxlan_settings/add_item")

    def get(self):
      return self._get("interfaces/vxlan_settings/get")

    def reconfigure(self):
      return self._post("interfaces/vxlan_settings/reconfigure")

    def get_search_item(self):
      return self._get("interfaces/vxlan_settings/search_item")

    def post_search_item(self):
      return self._post("interfaces/vxlan_settings/search_item")

    def set(self):
      return self._post("interfaces/vxlan_settings/set")

