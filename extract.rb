require 'capybara'
require 'capybara/dsl'
require 'pry'

Capybara.run_server = false
Capybara.current_driver = :selenium_headless
Capybara.app_host = 'https://docs.opnsense.org'


HEADER = "\nfrom pyopnsapi import client\n\n"

module CapybaraExtractor
  class Extractor
    include Capybara::DSL

    def extract
      visit('/development/api.html')
      
      core_apis = page.find("div#core-api ul").all("li a").map { |api_page| api_page[:href] }
      # plugins_apis = page.find("div#plugins-api ul").all("li a").map { |api_page| api_page[:href] }

      puts "Found #{core_apis.length} core APIs."
      # puts "Found #{plugins_apis.length} plugin APIs."

      core_apis.each { |api_page| extract_page(api_page, "core") }
      # plugins_apis.each { |api_page| extract_page(api_page, "plugins") }
    end

    def extract_page(api_url, type)
      visit(api_url)

      all_tables = page.all("table")
      
      modulee = page.find("h1").text

      if modulee == "Firmware"
        puts "\n!!! Skipping firmware" # TODO: stop skipping firmware
        return
      end

      puts "\n!!! Generating interface for #{api_url}"

      clazzes = []

      all_tables.each do |table|
        controller = table.find("caption").text.scan(/\(([^>]*)\)/).flatten.first.split("Controller")[0]
        rows = table.all("tr")[1..]

        clazzes << format_class(rows, controller, modulee)
      end

      filename = "#{modulee.downcase}.py"

      File.open("src/pyopnsapi/#{type}/#{filename}", 'w') do |file|
        file.write("# Auto-generated by extract.rb\n# API Documentation: #{api_url}\n")
        file.write(HEADER)

        clazzes.each do |clazz|
          file.write("\n#{clazz}")
        end
      end
    end

    def format_function(row)
      output = []

      methods = row[0].split(",")

      methods.each do |method|
        if methods.length > 1
          endpoint_name = "#{method.downcase}_#{row[3]}"
        else
          endpoint_name = row[3]
        end
        url = row[1..3].join("/")

        output << <<-END
    def #{endpoint_name}(self):
      return self._#{method.downcase}("#{url}")
        END
      end

      output.join("\n")
    end

    def format_class(table, controller, modulee)
      functions = table.map do |row|
        split = row.text.split("\n")
        next if split.length == 0

        if split[0] == "<<uses>>"
          # TODO: link to the xml model if used by a controller
          puts "MODEL: #{split[1]}"
          next
        end

        if split.length == 4
          format_function(split)
        else
          # TODO: generate functions when parameters are needed
          puts "[#{split[0]}] #{split[1..3].join("/")} (#{split[4]})"
        end
      end

      functions.compact!

      <<-END
class #{controller}Client(client.OPNClient):
    """A client for interacting with the #{modulee}/#{controller} endpoint.

    :param str api_key: The API key to use for requests
    :param str api_secret: The API secret to use for requests
    :param str base_url: The base API endpoint for the OPNsense deployment
    :param int timeout: The timeout in seconds for API requests
    """

#{functions.join("\n")}
      END
    end
  end
end

t = CapybaraExtractor::Extractor.new
t.extract
